{"version":3,"sources":["components/phonebook.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","value","filter","onChange","handleFilter","PersonForm","onSubmit","updatePhonebook","newName","handleNameChange","newNumber","handleNumberChange","type","ResultCatalog","persons","map","person","key","id","name","number","onClick","handleDeleteClick","Notification","notificationStyle","color","background","borderStyle","borderColor","borderRadius","margin","textAlign","notification","style","axios","get","then","response","data","entryObject","post","delete","newEntry","put","App","useState","setPersons","setNewName","setNewNumber","setFilter","message","setNotification","useEffect","commServer","phoneBook","showNotification","setTimeout","confirmDelete","deletePerson","console","log","window","confirm","confirmNumberChange","changeNumber","toString","duplicateAlert","alert","personsFiltered","toLowerCase","includes","event","target","preventDefault","findIndex","entry","find","changedEntry","update","catch","error","addEntry","newPersons","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e7532c8.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Filter = (props) => {\n    return(\n        <div>\n        Search by Name:<input value={props.filter}\n                      onChange={props.handleFilter}\n         />\n      </div>\n    )\n}\n\nexport const PersonForm = (props) => {\n    return(\n        <form onSubmit={props.updatePhonebook}>\n            <div>\n            Name: <input value={props.newName}\n                        onChange={props.handleNameChange}\n            />\n            </div>\n            <div>\n            Number: <input value={props.newNumber}\n                            onChange={props.handleNumberChange}\n            /></div>\n            <div>\n            <button type=\"submit\">Add</button>\n            </div>\n        </form>\n    )\n}\n\nexport const ResultCatalog = (props) => {\n    return(\n        <ul>\n            {props.persons.map(person => \n            <li key={person.id}>{person.name}<br />Tel: {person.number}\n            <button value={person.id} onClick={props.handleDeleteClick}>Delete</button>\n            </li>)}\n        </ul>\n    )\n}\n\nexport const Notification = (props) => {\n    const notificationStyle = {\n        color: props.color,\n        background: 'lightGray',\n        borderStyle: 'solid',\n        borderColor: props.color,\n        borderRadius: '5px',\n        margin: '10px',\n        textAlign: 'center'\n    }\n    if (props.notification === null) {\n        return null\n    }\n\n    return(\n        <div style={notificationStyle}>\n            <h1>{props.notification}</h1>\n        </div>\n    )\n}\n","import axios from 'axios'\nconst serverUrl = '/api/persons'\n\nconst getPhoneBook = () => {\n    const request = axios.get(serverUrl)\n    return request.then(response => response.data)\n}\n\n\nconst postToServer = (entryObject) => {\n    const request = axios.post(serverUrl, entryObject)\n    return request.then(response => response.data)\n}\n\nconst deleteFromServer = (id) => {\n    const request = axios.delete(`${serverUrl}/${id}`)\n    return request.then(response => response)\n}\n\nconst updatePhoneNumber = (id, newEntry) => {\n    const request = axios.put(`${serverUrl}/${id}`, newEntry)\n    return request.then(response => response.data)\n}\n\n\nexport default {\n    getPhoneBook: getPhoneBook,\n    postToServer: postToServer,\n    deleteFromServer: deleteFromServer,\n    updatePhoneNumber: updatePhoneNumber\n}","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Filter, PersonForm, ResultCatalog, Notification } from './components/phonebook'\nimport './App.css';\nimport commServer from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notification, setNotification] = useState({ message: null, color: null })\n\n\n  useEffect(() => {\n    commServer\n      .getPhoneBook()\n      .then(phoneBook => {\n        setPersons(phoneBook)\n      })\n  }, [notification])\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const addEntry = () => {\n    const entryObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    if (persons.findIndex(name => name.number === newNumber) !== -1) {\n       duplicateAlert()\n    \n    } else if (persons.findIndex(name => name.name === newName) !== -1) {\n      if (confirmNumberChange(newName) === true) {\n        const entry = persons.find(name => name.name === newName)\n        const changedEntry = {...entry, number: newNumber}\n        commServer.updatePhoneNumber(entry.id, changedEntry)\n                  .then(update =>\n                    setPersons(persons.map(person =>\n                      person.id !== entry.id ? person : update)),\n                    showNotification(\n                      `Updated ${entryObject.name} phonenumber to ${entryObject.number}`, \n                      `blue`)\n                   )\n                   .catch(error => {\n                     showNotification(\n                       `${entryObject.name} already removed from server.`,\n                       `red`\n                     )\n                   })\n      }     \n    } else {\n      //setPersons(persons.concat(entryObject))\n      commServer\n        .postToServer(entryObject)\n        .then(response => {\n          showNotification(`Added ${entryObject.name} to phonebook.`, `green`)\n        })\n        .catch(error => {\n          showNotification(\n            `${error.response.data.error.message}`,\n            `red`\n          )\n        })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const showNotification = (message, color) => {\n    setNotification({\n      message: message,\n      color: color\n    })\n    setTimeout(() => {\n      setNotification({ message: null, color: null })\n    }, 5000)\n  }\n\n  const updatePhonebook = (event) => {\n    event.preventDefault()\n    addEntry()\n  }\n\n  const handleFilter = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n\n  const handleDeleteClick = (event) => {\n    const newPersons = persons.filter(person => \n      person.id.toString() !== event.target.value)\n    const deletePerson = persons.filter(person =>\n      person.id.toString() === event.target.value)\n    console.log(deletePerson[0].name)\n    if (confirmDelete(deletePerson) === true){\n      commServer\n        .deleteFromServer(event.target.value)\n        .then(response => {\n          console.log(response)\n          setPersons(newPersons)\n          showNotification(\n            `${deletePerson[0].name} deleted.`,\n            `red`\n          )\n        })\n      }\n    \n  }\n\n  const confirmDelete = (deletePerson) => {\n      console.log(deletePerson[0].name)\n    return(\n      window.confirm(`Removing ${deletePerson[0].name}. Are you sure?`)\n    )  \n  }\n\n  const confirmNumberChange = (newName) => {\n    const changeNumber = persons.filter(name =>\n      name.name.toString() === newName)\n    return(\n      window.confirm(`Changing ${changeNumber[0].name} number to ${newNumber}. Proceed?`)\n    )\n  }\n\n\n  const duplicateAlert = () => alert(`${newName} already in the Phonebook!`)\n\n  const personsFiltered = persons.filter(persons => \n    persons.name.toLowerCase().includes(filter.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification.message}\n                    color={notification.color}\n      />\n      <Filter filter={filter} handleFilter={handleFilter} />\n      <h3>Add Person:</h3>\n      <PersonForm updatePhonebook={updatePhonebook} \n                  newName={newName}\n                  handleNameChange={handleNameChange}\n                  newNumber={newNumber}\n                  handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers:</h2>\n      <ResultCatalog persons={personsFiltered}\n                     handleDeleteClick={handleDeleteClick}\n       />\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}